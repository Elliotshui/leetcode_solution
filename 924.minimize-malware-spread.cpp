/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int min = 0, minnode = -1;
        vector<bool> visited(graph.size(), false);
        sort(initial.begin(), initial.end());
        for(int i = 0; i < initial.size(); ++i) {
            if(visited[initial[i]]) continue;
            int cnt = 1;
            visited[initial[i]] = true;
            queue<int> q;
            q.push(initial[i]);
            while(!q.empty()) {
                int t = q.front();
                for(int j = 0; j < graph.size(); ++j) {
                    if(graph[t][j] == 1  && visited[j] == false) {
                        q.push(j);
                        visited[j] = true;
                        cnt++;
                    }
                }
                q.pop();
            }
            if(cnt > min) {
                min = cnt;
                minnode = i;
            }
        }
        return initial[minnode]; 
    }
};
// @lc code=end

